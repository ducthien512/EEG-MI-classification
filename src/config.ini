[Augmentation]
; Augmentation method used to increase the size of the training dataset.
; Possible methods are: cVAE, cWGAN-GP, NI
; If you also want to include no augmentation with combination of other methods, put an empty string e.g. space followed
; by a comma. , NI, cVAE, cWGAN-GP
method_names = , NI, cVAE, cWGAN-GP

; A multiplier used to calculate the amount of new generated training samples used for classification. The resulting
; training dataset size will then be: real_training_size + (generated_data_multiplier * real_training_size).
; For example: whole dataset size is 200, training is then 150 and testing 50 (using 0.25 test_train split ratio).
; With the multiplier set to 1, 150 new samples will be generated thus making the training dataset size 300 (50:50 split
; of real data and new augmented data).
generated_data_multiplier = 1

[Classification]

; Classification models that will be used to classify epoched data based on the specific classification type
; Possible classifiers are: SVM, LDA, MLP, CNN, LSTM , GRU
; Can also be emtpy if classification is not desired and only the augmentation methods and their evaluation will run.
model_names = ResNetSETransformer

; Boolean flag, whether to use already pretrained models. If set to True, will try to load a previously trained model
; that will be used to for classification/augmentation without retraining. If the model can't be found the model will
; be trained as if the flag was set to False.
use_pre_trained_models = false

; The amount of folds used for cross validation when training the specified models. Has to be at least 2.
k_folds = 10

[Metrics]
; Which metrics will be reported at the end of the classification.
; Possible metrics are: accuracy, precision, recall, f1_score, confusion_matrix
classification_metrics = accuracy, precision, recall, f1_score, auc, confusion_matrix

; Metrics that are to be reported for each augmentation method.
; Possible metrics are fid (Fr√©chet inception distance), snr (Signal to noise ratio),
; rmse (Root mean square error), cc (Cross correlation) fid, snr, rmse, cc
augmentation_metrics =

[GPU]
; Whether or not to use GPU for Keras models training and evaluation. This requires to have a CUDA GPU on your system
; and installed the cudatoolkit as per the installation instructions in README.md
use_gpu = true

[Other]
; What type of classification should the application do. Can be one of: binary, multiclass
; For binary classification the task is to classify the Resting epochs vs Movement epochs. Where movement epochs are
; a combination of both right and left movement.
; For multiclass classification the task is to classify Resting epochs vs Left movement epochs vs Right movement epochs.
; The data is split into 3 classes, the left movement class is epochs marked with movement start marker (5) from files
; labeled as left movement (each file format has a label that distinguishes between left and right movement task).
; Similarly the right class is the epochs marked with movement start marker (5) from files labeled as right movement.
; In order to distinguish from these two classes the right movement label is remapped to value 6, left stays 5.
; Resting class is epochs marked by middle resting phase marker (2), where half of the resting epochs are taken from
; the left tasks and the other half is take from the right tasks.
classification_type = binary

; Which format the data will be preprocessed into. Can be one of:
; time_series - each data sample is represented by measured time series signal data
; frequency - each time series data sample is transformed into frequency spectrum 8-30hz using multitaper method
; time_frequency - time series data are transformed to time frequency spectrum (spectrograms)
data_representation = time_frequency

; Whether or not to save different plots drawn during the classification process.
save_plots = true

; Flag that will set a specific seed to random number generators if set to True. This will make it so that consequent
; runs of the application will produce the same results.
deterministic = true

; Whether to save the preprocessed data matrix as a numpy file for the specific data representation, which can then be
; loaded thus skipping the preprocessing part. If set to true and the matrix file already exists
; the data from that file will be used. Otherwise preprocesses the raw eeg signal data and stores the file.
; If set to false no preprocessed data files are saved.
save_load_preprocessed_data = true
